/* soapH.h
   Generated by gSOAP 2.8.34 for service.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_ns__CCalibrationXYZNewService_DEFINED
#define SOAP_TYPE_ns__CCalibrationXYZNewService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CCalibrationXYZNewService(struct soap*, struct ns__CCalibrationXYZNewService *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CCalibrationXYZNewService(struct soap*, const struct ns__CCalibrationXYZNewService *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CCalibrationXYZNewService(struct soap*, const char*, int, const struct ns__CCalibrationXYZNewService *, const char*);
SOAP_FMAC3 struct ns__CCalibrationXYZNewService * SOAP_FMAC4 soap_in_ns__CCalibrationXYZNewService(struct soap*, const char*, struct ns__CCalibrationXYZNewService *, const char*);
SOAP_FMAC1 struct ns__CCalibrationXYZNewService * SOAP_FMAC2 soap_instantiate_ns__CCalibrationXYZNewService(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__CCalibrationXYZNewService * soap_new_ns__CCalibrationXYZNewService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__CCalibrationXYZNewService(soap, n, NULL, NULL, NULL);
}

inline struct ns__CCalibrationXYZNewService * soap_new_req_ns__CCalibrationXYZNewService(
	struct soap *soap,
	const struct ns__CCalibrationXYZNewPARA& inPara)
{
	struct ns__CCalibrationXYZNewService *_p = soap_new_ns__CCalibrationXYZNewService(soap);
	if (_p)
	{	soap_default_ns__CCalibrationXYZNewService(soap, _p);
		_p->inPara = inPara;
	}
	return _p;
}

inline struct ns__CCalibrationXYZNewService * soap_new_set_ns__CCalibrationXYZNewService(
	struct soap *soap,
	const struct ns__CCalibrationXYZNewPARA& inPara)
{
	struct ns__CCalibrationXYZNewService *_p = soap_new_ns__CCalibrationXYZNewService(soap);
	if (_p)
	{	soap_default_ns__CCalibrationXYZNewService(soap, _p);
		_p->inPara = inPara;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CCalibrationXYZNewService(struct soap*, const struct ns__CCalibrationXYZNewService *, const char*, const char*);

inline int soap_write_ns__CCalibrationXYZNewService(struct soap *soap, struct ns__CCalibrationXYZNewService const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__CCalibrationXYZNewService(soap, p), 0) || soap_put_ns__CCalibrationXYZNewService(soap, p, "ns:CCalibrationXYZNewService", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__CCalibrationXYZNewService * SOAP_FMAC4 soap_get_ns__CCalibrationXYZNewService(struct soap*, struct ns__CCalibrationXYZNewService *, const char*, const char*);

inline int soap_read_ns__CCalibrationXYZNewService(struct soap *soap, struct ns__CCalibrationXYZNewService *p)
{
	if (p)
	{	soap_default_ns__CCalibrationXYZNewService(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__CCalibrationXYZNewService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__getCCalibrationXYZFile_DEFINED
#define SOAP_TYPE_ns__getCCalibrationXYZFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getCCalibrationXYZFile(struct soap*, struct ns__getCCalibrationXYZFile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getCCalibrationXYZFile(struct soap*, const struct ns__getCCalibrationXYZFile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getCCalibrationXYZFile(struct soap*, const char*, int, const struct ns__getCCalibrationXYZFile *, const char*);
SOAP_FMAC3 struct ns__getCCalibrationXYZFile * SOAP_FMAC4 soap_in_ns__getCCalibrationXYZFile(struct soap*, const char*, struct ns__getCCalibrationXYZFile *, const char*);
SOAP_FMAC1 struct ns__getCCalibrationXYZFile * SOAP_FMAC2 soap_instantiate_ns__getCCalibrationXYZFile(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getCCalibrationXYZFile * soap_new_ns__getCCalibrationXYZFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__getCCalibrationXYZFile(soap, n, NULL, NULL, NULL);
}

inline struct ns__getCCalibrationXYZFile * soap_new_req_ns__getCCalibrationXYZFile(
	struct soap *soap,
	const struct SOAP_ENC__base64& inFile)
{
	struct ns__getCCalibrationXYZFile *_p = soap_new_ns__getCCalibrationXYZFile(soap);
	if (_p)
	{	soap_default_ns__getCCalibrationXYZFile(soap, _p);
		_p->inFile = inFile;
	}
	return _p;
}

inline struct ns__getCCalibrationXYZFile * soap_new_set_ns__getCCalibrationXYZFile(
	struct soap *soap,
	const struct SOAP_ENC__base64& inFile)
{
	struct ns__getCCalibrationXYZFile *_p = soap_new_ns__getCCalibrationXYZFile(soap);
	if (_p)
	{	soap_default_ns__getCCalibrationXYZFile(soap, _p);
		_p->inFile = inFile;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getCCalibrationXYZFile(struct soap*, const struct ns__getCCalibrationXYZFile *, const char*, const char*);

inline int soap_write_ns__getCCalibrationXYZFile(struct soap *soap, struct ns__getCCalibrationXYZFile const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__getCCalibrationXYZFile(soap, p), 0) || soap_put_ns__getCCalibrationXYZFile(soap, p, "ns:getCCalibrationXYZFile", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__getCCalibrationXYZFile * SOAP_FMAC4 soap_get_ns__getCCalibrationXYZFile(struct soap*, struct ns__getCCalibrationXYZFile *, const char*, const char*);

inline int soap_read_ns__getCCalibrationXYZFile(struct soap *soap, struct ns__getCCalibrationXYZFile *p)
{
	if (p)
	{	soap_default_ns__getCCalibrationXYZFile(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__getCCalibrationXYZFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__getCCalibrationXYZFileResponse_DEFINED
#define SOAP_TYPE_ns__getCCalibrationXYZFileResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getCCalibrationXYZFileResponse(struct soap*, struct ns__getCCalibrationXYZFileResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getCCalibrationXYZFileResponse(struct soap*, const struct ns__getCCalibrationXYZFileResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getCCalibrationXYZFileResponse(struct soap*, const char*, int, const struct ns__getCCalibrationXYZFileResponse *, const char*);
SOAP_FMAC3 struct ns__getCCalibrationXYZFileResponse * SOAP_FMAC4 soap_in_ns__getCCalibrationXYZFileResponse(struct soap*, const char*, struct ns__getCCalibrationXYZFileResponse *, const char*);
SOAP_FMAC1 struct ns__getCCalibrationXYZFileResponse * SOAP_FMAC2 soap_instantiate_ns__getCCalibrationXYZFileResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getCCalibrationXYZFileResponse * soap_new_ns__getCCalibrationXYZFileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__getCCalibrationXYZFileResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__getCCalibrationXYZFileResponse * soap_new_req_ns__getCCalibrationXYZFileResponse(
	struct soap *soap,
	int result)
{
	struct ns__getCCalibrationXYZFileResponse *_p = soap_new_ns__getCCalibrationXYZFileResponse(soap);
	if (_p)
	{	soap_default_ns__getCCalibrationXYZFileResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}

inline struct ns__getCCalibrationXYZFileResponse * soap_new_set_ns__getCCalibrationXYZFileResponse(
	struct soap *soap,
	int result)
{
	struct ns__getCCalibrationXYZFileResponse *_p = soap_new_ns__getCCalibrationXYZFileResponse(soap);
	if (_p)
	{	soap_default_ns__getCCalibrationXYZFileResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getCCalibrationXYZFileResponse(struct soap*, const struct ns__getCCalibrationXYZFileResponse *, const char*, const char*);

inline int soap_write_ns__getCCalibrationXYZFileResponse(struct soap *soap, struct ns__getCCalibrationXYZFileResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__getCCalibrationXYZFileResponse(soap, p), 0) || soap_put_ns__getCCalibrationXYZFileResponse(soap, p, "ns:getCCalibrationXYZFileResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__getCCalibrationXYZFileResponse * SOAP_FMAC4 soap_get_ns__getCCalibrationXYZFileResponse(struct soap*, struct ns__getCCalibrationXYZFileResponse *, const char*, const char*);

inline int soap_read_ns__getCCalibrationXYZFileResponse(struct soap *soap, struct ns__getCCalibrationXYZFileResponse *p)
{
	if (p)
	{	soap_default_ns__getCCalibrationXYZFileResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__getCCalibrationXYZFileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__TempleMatchService_DEFINED
#define SOAP_TYPE_ns__TempleMatchService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TempleMatchService(struct soap*, struct ns__TempleMatchService *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__TempleMatchService(struct soap*, const struct ns__TempleMatchService *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TempleMatchService(struct soap*, const char*, int, const struct ns__TempleMatchService *, const char*);
SOAP_FMAC3 struct ns__TempleMatchService * SOAP_FMAC4 soap_in_ns__TempleMatchService(struct soap*, const char*, struct ns__TempleMatchService *, const char*);
SOAP_FMAC1 struct ns__TempleMatchService * SOAP_FMAC2 soap_instantiate_ns__TempleMatchService(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__TempleMatchService * soap_new_ns__TempleMatchService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__TempleMatchService(soap, n, NULL, NULL, NULL);
}

inline struct ns__TempleMatchService * soap_new_req_ns__TempleMatchService(
	struct soap *soap,
	const struct ns__TempleMatchPARA& inPara)
{
	struct ns__TempleMatchService *_p = soap_new_ns__TempleMatchService(soap);
	if (_p)
	{	soap_default_ns__TempleMatchService(soap, _p);
		_p->inPara = inPara;
	}
	return _p;
}

inline struct ns__TempleMatchService * soap_new_set_ns__TempleMatchService(
	struct soap *soap,
	const struct ns__TempleMatchPARA& inPara)
{
	struct ns__TempleMatchService *_p = soap_new_ns__TempleMatchService(soap);
	if (_p)
	{	soap_default_ns__TempleMatchService(soap, _p);
		_p->inPara = inPara;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TempleMatchService(struct soap*, const struct ns__TempleMatchService *, const char*, const char*);

inline int soap_write_ns__TempleMatchService(struct soap *soap, struct ns__TempleMatchService const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__TempleMatchService(soap, p), 0) || soap_put_ns__TempleMatchService(soap, p, "ns:TempleMatchService", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__TempleMatchService * SOAP_FMAC4 soap_get_ns__TempleMatchService(struct soap*, struct ns__TempleMatchService *, const char*, const char*);

inline int soap_read_ns__TempleMatchService(struct soap *soap, struct ns__TempleMatchService *p)
{
	if (p)
	{	soap_default_ns__TempleMatchService(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__TempleMatchService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__getFileService_DEFINED
#define SOAP_TYPE_ns__getFileService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getFileService(struct soap*, struct ns__getFileService *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getFileService(struct soap*, const struct ns__getFileService *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getFileService(struct soap*, const char*, int, const struct ns__getFileService *, const char*);
SOAP_FMAC3 struct ns__getFileService * SOAP_FMAC4 soap_in_ns__getFileService(struct soap*, const char*, struct ns__getFileService *, const char*);
SOAP_FMAC1 struct ns__getFileService * SOAP_FMAC2 soap_instantiate_ns__getFileService(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getFileService * soap_new_ns__getFileService(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__getFileService(soap, n, NULL, NULL, NULL);
}

inline struct ns__getFileService * soap_new_req_ns__getFileService(
	struct soap *soap,
	const struct ns__TempleFiles& in)
{
	struct ns__getFileService *_p = soap_new_ns__getFileService(soap);
	if (_p)
	{	soap_default_ns__getFileService(soap, _p);
		_p->in = in;
	}
	return _p;
}

inline struct ns__getFileService * soap_new_set_ns__getFileService(
	struct soap *soap,
	const struct ns__TempleFiles& in)
{
	struct ns__getFileService *_p = soap_new_ns__getFileService(soap);
	if (_p)
	{	soap_default_ns__getFileService(soap, _p);
		_p->in = in;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getFileService(struct soap*, const struct ns__getFileService *, const char*, const char*);

inline int soap_write_ns__getFileService(struct soap *soap, struct ns__getFileService const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__getFileService(soap, p), 0) || soap_put_ns__getFileService(soap, p, "ns:getFileService", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__getFileService * SOAP_FMAC4 soap_get_ns__getFileService(struct soap*, struct ns__getFileService *, const char*, const char*);

inline int soap_read_ns__getFileService(struct soap *soap, struct ns__getFileService *p)
{
	if (p)
	{	soap_default_ns__getFileService(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__getFileService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__getFileServiceResponse_DEFINED
#define SOAP_TYPE_ns__getFileServiceResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getFileServiceResponse(struct soap*, struct ns__getFileServiceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getFileServiceResponse(struct soap*, const struct ns__getFileServiceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getFileServiceResponse(struct soap*, const char*, int, const struct ns__getFileServiceResponse *, const char*);
SOAP_FMAC3 struct ns__getFileServiceResponse * SOAP_FMAC4 soap_in_ns__getFileServiceResponse(struct soap*, const char*, struct ns__getFileServiceResponse *, const char*);
SOAP_FMAC1 struct ns__getFileServiceResponse * SOAP_FMAC2 soap_instantiate_ns__getFileServiceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getFileServiceResponse * soap_new_ns__getFileServiceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__getFileServiceResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__getFileServiceResponse * soap_new_req_ns__getFileServiceResponse(
	struct soap *soap,
	int result)
{
	struct ns__getFileServiceResponse *_p = soap_new_ns__getFileServiceResponse(soap);
	if (_p)
	{	soap_default_ns__getFileServiceResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}

inline struct ns__getFileServiceResponse * soap_new_set_ns__getFileServiceResponse(
	struct soap *soap,
	int result)
{
	struct ns__getFileServiceResponse *_p = soap_new_ns__getFileServiceResponse(soap);
	if (_p)
	{	soap_default_ns__getFileServiceResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getFileServiceResponse(struct soap*, const struct ns__getFileServiceResponse *, const char*, const char*);

inline int soap_write_ns__getFileServiceResponse(struct soap *soap, struct ns__getFileServiceResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__getFileServiceResponse(soap, p), 0) || soap_put_ns__getFileServiceResponse(soap, p, "ns:getFileServiceResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__getFileServiceResponse * SOAP_FMAC4 soap_get_ns__getFileServiceResponse(struct soap*, struct ns__getFileServiceResponse *, const char*, const char*);

inline int soap_read_ns__getFileServiceResponse(struct soap *soap, struct ns__getFileServiceResponse *p)
{
	if (p)
	{	soap_default_ns__getFileServiceResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__getFileServiceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__CCalibrationXYZNewOUT_DEFINED
#define SOAP_TYPE_ns__CCalibrationXYZNewOUT_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CCalibrationXYZNewOUT(struct soap*, struct ns__CCalibrationXYZNewOUT *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CCalibrationXYZNewOUT(struct soap*, const struct ns__CCalibrationXYZNewOUT *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CCalibrationXYZNewOUT(struct soap*, const char*, int, const struct ns__CCalibrationXYZNewOUT *, const char*);
SOAP_FMAC3 struct ns__CCalibrationXYZNewOUT * SOAP_FMAC4 soap_in_ns__CCalibrationXYZNewOUT(struct soap*, const char*, struct ns__CCalibrationXYZNewOUT *, const char*);
SOAP_FMAC1 struct ns__CCalibrationXYZNewOUT * SOAP_FMAC2 soap_instantiate_ns__CCalibrationXYZNewOUT(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__CCalibrationXYZNewOUT * soap_new_ns__CCalibrationXYZNewOUT(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__CCalibrationXYZNewOUT(soap, n, NULL, NULL, NULL);
}

inline struct ns__CCalibrationXYZNewOUT * soap_new_req_ns__CCalibrationXYZNewOUT(
	struct soap *soap,
	float const*CalibrationX,
	float const*CalibrationY)
{
	struct ns__CCalibrationXYZNewOUT *_p = soap_new_ns__CCalibrationXYZNewOUT(soap);
	if (_p)
	{	soap_default_ns__CCalibrationXYZNewOUT(soap, _p);
		for (int i = 0; i < 20; i++) _p->CalibrationX[i] = CalibrationX[i];
		for (int i = 0; i < 20; i++) _p->CalibrationY[i] = CalibrationY[i];
	}
	return _p;
}

inline struct ns__CCalibrationXYZNewOUT * soap_new_set_ns__CCalibrationXYZNewOUT(
	struct soap *soap,
	float const*CalibrationX,
	float const*CalibrationY)
{
	struct ns__CCalibrationXYZNewOUT *_p = soap_new_ns__CCalibrationXYZNewOUT(soap);
	if (_p)
	{	soap_default_ns__CCalibrationXYZNewOUT(soap, _p);
		for (int i = 0; i < 20; i++) _p->CalibrationX[i] = CalibrationX[i];
		for (int i = 0; i < 20; i++) _p->CalibrationY[i] = CalibrationY[i];
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CCalibrationXYZNewOUT(struct soap*, const struct ns__CCalibrationXYZNewOUT *, const char*, const char*);

inline int soap_write_ns__CCalibrationXYZNewOUT(struct soap *soap, struct ns__CCalibrationXYZNewOUT const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__CCalibrationXYZNewOUT(soap, p), 0) || soap_put_ns__CCalibrationXYZNewOUT(soap, p, "ns:CCalibrationXYZNewOUT", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__CCalibrationXYZNewOUT * SOAP_FMAC4 soap_get_ns__CCalibrationXYZNewOUT(struct soap*, struct ns__CCalibrationXYZNewOUT *, const char*, const char*);

inline int soap_read_ns__CCalibrationXYZNewOUT(struct soap *soap, struct ns__CCalibrationXYZNewOUT *p)
{
	if (p)
	{	soap_default_ns__CCalibrationXYZNewOUT(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__CCalibrationXYZNewOUT(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__CCalibrationXYZNewPARA_DEFINED
#define SOAP_TYPE_ns__CCalibrationXYZNewPARA_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CCalibrationXYZNewPARA(struct soap*, struct ns__CCalibrationXYZNewPARA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CCalibrationXYZNewPARA(struct soap*, const struct ns__CCalibrationXYZNewPARA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CCalibrationXYZNewPARA(struct soap*, const char*, int, const struct ns__CCalibrationXYZNewPARA *, const char*);
SOAP_FMAC3 struct ns__CCalibrationXYZNewPARA * SOAP_FMAC4 soap_in_ns__CCalibrationXYZNewPARA(struct soap*, const char*, struct ns__CCalibrationXYZNewPARA *, const char*);
SOAP_FMAC1 struct ns__CCalibrationXYZNewPARA * SOAP_FMAC2 soap_instantiate_ns__CCalibrationXYZNewPARA(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__CCalibrationXYZNewPARA * soap_new_ns__CCalibrationXYZNewPARA(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__CCalibrationXYZNewPARA(soap, n, NULL, NULL, NULL);
}

inline struct ns__CCalibrationXYZNewPARA * soap_new_req_ns__CCalibrationXYZNewPARA(
	struct soap *soap,
	float const*srcTriX,
	float const*srcTriY,
	int number)
{
	struct ns__CCalibrationXYZNewPARA *_p = soap_new_ns__CCalibrationXYZNewPARA(soap);
	if (_p)
	{	soap_default_ns__CCalibrationXYZNewPARA(soap, _p);
		for (int i = 0; i < 20; i++) _p->srcTriX[i] = srcTriX[i];
		for (int i = 0; i < 20; i++) _p->srcTriY[i] = srcTriY[i];
		_p->number = number;
	}
	return _p;
}

inline struct ns__CCalibrationXYZNewPARA * soap_new_set_ns__CCalibrationXYZNewPARA(
	struct soap *soap,
	float const*srcTriX,
	float const*srcTriY,
	int number)
{
	struct ns__CCalibrationXYZNewPARA *_p = soap_new_ns__CCalibrationXYZNewPARA(soap);
	if (_p)
	{	soap_default_ns__CCalibrationXYZNewPARA(soap, _p);
		for (int i = 0; i < 20; i++) _p->srcTriX[i] = srcTriX[i];
		for (int i = 0; i < 20; i++) _p->srcTriY[i] = srcTriY[i];
		_p->number = number;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CCalibrationXYZNewPARA(struct soap*, const struct ns__CCalibrationXYZNewPARA *, const char*, const char*);

inline int soap_write_ns__CCalibrationXYZNewPARA(struct soap *soap, struct ns__CCalibrationXYZNewPARA const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__CCalibrationXYZNewPARA(soap, p), 0) || soap_put_ns__CCalibrationXYZNewPARA(soap, p, "ns:CCalibrationXYZNewPARA", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__CCalibrationXYZNewPARA * SOAP_FMAC4 soap_get_ns__CCalibrationXYZNewPARA(struct soap*, struct ns__CCalibrationXYZNewPARA *, const char*, const char*);

inline int soap_read_ns__CCalibrationXYZNewPARA(struct soap *soap, struct ns__CCalibrationXYZNewPARA *p)
{
	if (p)
	{	soap_default_ns__CCalibrationXYZNewPARA(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__CCalibrationXYZNewPARA(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__TempleMatchOUT_DEFINED
#define SOAP_TYPE_ns__TempleMatchOUT_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TempleMatchOUT(struct soap*, struct ns__TempleMatchOUT *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__TempleMatchOUT(struct soap*, const struct ns__TempleMatchOUT *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TempleMatchOUT(struct soap*, const char*, int, const struct ns__TempleMatchOUT *, const char*);
SOAP_FMAC3 struct ns__TempleMatchOUT * SOAP_FMAC4 soap_in_ns__TempleMatchOUT(struct soap*, const char*, struct ns__TempleMatchOUT *, const char*);
SOAP_FMAC1 struct ns__TempleMatchOUT * SOAP_FMAC2 soap_instantiate_ns__TempleMatchOUT(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__TempleMatchOUT * soap_new_ns__TempleMatchOUT(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__TempleMatchOUT(soap, n, NULL, NULL, NULL);
}

inline struct ns__TempleMatchOUT * soap_new_req_ns__TempleMatchOUT(
	struct soap *soap,
	float const*fcosts,
	float const*fCenterCoordsX,
	float const*fCenterCoordsY,
	float const*fangles,
	float const*ftempScales,
	int ioutNumber)
{
	struct ns__TempleMatchOUT *_p = soap_new_ns__TempleMatchOUT(soap);
	if (_p)
	{	soap_default_ns__TempleMatchOUT(soap, _p);
		for (int i = 0; i < 20; i++) _p->fcosts[i] = fcosts[i];
		for (int i = 0; i < 20; i++) _p->fCenterCoordsX[i] = fCenterCoordsX[i];
		for (int i = 0; i < 20; i++) _p->fCenterCoordsY[i] = fCenterCoordsY[i];
		for (int i = 0; i < 20; i++) _p->fangles[i] = fangles[i];
		for (int i = 0; i < 20; i++) _p->ftempScales[i] = ftempScales[i];
		_p->ioutNumber = ioutNumber;
	}
	return _p;
}

inline struct ns__TempleMatchOUT * soap_new_set_ns__TempleMatchOUT(
	struct soap *soap,
	float const*fcosts,
	float const*fCenterCoordsX,
	float const*fCenterCoordsY,
	float const*fangles,
	float const*ftempScales,
	int ioutNumber)
{
	struct ns__TempleMatchOUT *_p = soap_new_ns__TempleMatchOUT(soap);
	if (_p)
	{	soap_default_ns__TempleMatchOUT(soap, _p);
		for (int i = 0; i < 20; i++) _p->fcosts[i] = fcosts[i];
		for (int i = 0; i < 20; i++) _p->fCenterCoordsX[i] = fCenterCoordsX[i];
		for (int i = 0; i < 20; i++) _p->fCenterCoordsY[i] = fCenterCoordsY[i];
		for (int i = 0; i < 20; i++) _p->fangles[i] = fangles[i];
		for (int i = 0; i < 20; i++) _p->ftempScales[i] = ftempScales[i];
		_p->ioutNumber = ioutNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TempleMatchOUT(struct soap*, const struct ns__TempleMatchOUT *, const char*, const char*);

inline int soap_write_ns__TempleMatchOUT(struct soap *soap, struct ns__TempleMatchOUT const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__TempleMatchOUT(soap, p), 0) || soap_put_ns__TempleMatchOUT(soap, p, "ns:TempleMatchOUT", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__TempleMatchOUT * SOAP_FMAC4 soap_get_ns__TempleMatchOUT(struct soap*, struct ns__TempleMatchOUT *, const char*, const char*);

inline int soap_read_ns__TempleMatchOUT(struct soap *soap, struct ns__TempleMatchOUT *p)
{
	if (p)
	{	soap_default_ns__TempleMatchOUT(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__TempleMatchOUT(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__TempleMatchPARA_DEFINED
#define SOAP_TYPE_ns__TempleMatchPARA_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TempleMatchPARA(struct soap*, struct ns__TempleMatchPARA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__TempleMatchPARA(struct soap*, const struct ns__TempleMatchPARA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TempleMatchPARA(struct soap*, const char*, int, const struct ns__TempleMatchPARA *, const char*);
SOAP_FMAC3 struct ns__TempleMatchPARA * SOAP_FMAC4 soap_in_ns__TempleMatchPARA(struct soap*, const char*, struct ns__TempleMatchPARA *, const char*);
SOAP_FMAC1 struct ns__TempleMatchPARA * SOAP_FMAC2 soap_instantiate_ns__TempleMatchPARA(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__TempleMatchPARA * soap_new_ns__TempleMatchPARA(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__TempleMatchPARA(soap, n, NULL, NULL, NULL);
}

inline struct ns__TempleMatchPARA * soap_new_req_ns__TempleMatchPARA(
	struct soap *soap,
	const struct SOAP_ENC__base64& imggray,
	int widthImg,
	int heightImg)
{
	struct ns__TempleMatchPARA *_p = soap_new_ns__TempleMatchPARA(soap);
	if (_p)
	{	soap_default_ns__TempleMatchPARA(soap, _p);
		_p->imggray = imggray;
		_p->widthImg = widthImg;
		_p->heightImg = heightImg;
	}
	return _p;
}

inline struct ns__TempleMatchPARA * soap_new_set_ns__TempleMatchPARA(
	struct soap *soap,
	const struct SOAP_ENC__base64& imggray,
	int widthImg,
	int heightImg)
{
	struct ns__TempleMatchPARA *_p = soap_new_ns__TempleMatchPARA(soap);
	if (_p)
	{	soap_default_ns__TempleMatchPARA(soap, _p);
		_p->imggray = imggray;
		_p->widthImg = widthImg;
		_p->heightImg = heightImg;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TempleMatchPARA(struct soap*, const struct ns__TempleMatchPARA *, const char*, const char*);

inline int soap_write_ns__TempleMatchPARA(struct soap *soap, struct ns__TempleMatchPARA const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__TempleMatchPARA(soap, p), 0) || soap_put_ns__TempleMatchPARA(soap, p, "ns:TempleMatchPARA", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__TempleMatchPARA * SOAP_FMAC4 soap_get_ns__TempleMatchPARA(struct soap*, struct ns__TempleMatchPARA *, const char*, const char*);

inline int soap_read_ns__TempleMatchPARA(struct soap *soap, struct ns__TempleMatchPARA *p)
{
	if (p)
	{	soap_default_ns__TempleMatchPARA(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__TempleMatchPARA(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns__TempleFiles_DEFINED
#define SOAP_TYPE_ns__TempleFiles_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TempleFiles(struct soap*, struct ns__TempleFiles *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__TempleFiles(struct soap*, const struct ns__TempleFiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TempleFiles(struct soap*, const char*, int, const struct ns__TempleFiles *, const char*);
SOAP_FMAC3 struct ns__TempleFiles * SOAP_FMAC4 soap_in_ns__TempleFiles(struct soap*, const char*, struct ns__TempleFiles *, const char*);
SOAP_FMAC1 struct ns__TempleFiles * SOAP_FMAC2 soap_instantiate_ns__TempleFiles(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__TempleFiles * soap_new_ns__TempleFiles(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__TempleFiles(soap, n, NULL, NULL, NULL);
}

inline struct ns__TempleFiles * soap_new_req_ns__TempleFiles(
	struct soap *soap,
	const struct SOAP_ENC__base64& image,
	const struct SOAP_ENC__base64& image2,
	const struct SOAP_ENC__base64& image3,
	const struct SOAP_ENC__base64& matchTemPlate,
	const struct SOAP_ENC__base64& tplgray)
{
	struct ns__TempleFiles *_p = soap_new_ns__TempleFiles(soap);
	if (_p)
	{	soap_default_ns__TempleFiles(soap, _p);
		_p->image = image;
		_p->image2 = image2;
		_p->image3 = image3;
		_p->matchTemPlate = matchTemPlate;
		_p->tplgray = tplgray;
	}
	return _p;
}

inline struct ns__TempleFiles * soap_new_set_ns__TempleFiles(
	struct soap *soap,
	const struct SOAP_ENC__base64& image,
	const struct SOAP_ENC__base64& image2,
	const struct SOAP_ENC__base64& image3,
	const struct SOAP_ENC__base64& matchTemPlate,
	const struct SOAP_ENC__base64& tplgray)
{
	struct ns__TempleFiles *_p = soap_new_ns__TempleFiles(soap);
	if (_p)
	{	soap_default_ns__TempleFiles(soap, _p);
		_p->image = image;
		_p->image2 = image2;
		_p->image3 = image3;
		_p->matchTemPlate = matchTemPlate;
		_p->tplgray = tplgray;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TempleFiles(struct soap*, const struct ns__TempleFiles *, const char*, const char*);

inline int soap_write_ns__TempleFiles(struct soap *soap, struct ns__TempleFiles const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_ns__TempleFiles(soap, p), 0) || soap_put_ns__TempleFiles(soap, p, "ns:TempleFiles", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__TempleFiles * SOAP_FMAC4 soap_get_ns__TempleFiles(struct soap*, struct ns__TempleFiles *, const char*, const char*);

inline int soap_read_ns__TempleFiles(struct soap *soap, struct ns__TempleFiles *p)
{
	if (p)
	{	soap_default_ns__TempleFiles(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns__TempleFiles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_SOAP_ENC__base64_DEFINED
#define SOAP_TYPE_SOAP_ENC__base64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENC__base64(struct soap*, struct SOAP_ENC__base64 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENC__base64(struct soap*, const struct SOAP_ENC__base64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__base64(struct soap*, const char*, int, const struct SOAP_ENC__base64 *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_SOAP_ENC__base642s(struct soap*, struct SOAP_ENC__base64);
SOAP_FMAC3 struct SOAP_ENC__base64 * SOAP_FMAC4 soap_in_SOAP_ENC__base64(struct soap*, const char*, struct SOAP_ENC__base64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2SOAP_ENC__base64(struct soap*, const char*, struct SOAP_ENC__base64 *);
SOAP_FMAC1 struct SOAP_ENC__base64 * SOAP_FMAC2 soap_instantiate_SOAP_ENC__base64(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENC__base64 * soap_new_SOAP_ENC__base64(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENC__base64(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENC__base64 * soap_new_req_SOAP_ENC__base64(
	struct soap *soap)
{
	struct SOAP_ENC__base64 *_p = soap_new_SOAP_ENC__base64(soap);
	if (_p)
	{	soap_default_SOAP_ENC__base64(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENC__base64 * soap_new_set_SOAP_ENC__base64(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{
	struct SOAP_ENC__base64 *_p = soap_new_SOAP_ENC__base64(soap);
	if (_p)
	{	soap_default_SOAP_ENC__base64(soap, _p);
		_p->__ptr = __ptr;
		_p->__size = __size;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENC__base64(struct soap*, const struct SOAP_ENC__base64 *, const char*, const char*);

inline int soap_write_SOAP_ENC__base64(struct soap *soap, struct SOAP_ENC__base64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENC__base64(soap, p), 0) || soap_put_SOAP_ENC__base64(soap, p, "SOAP-ENC:base64", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENC__base64 * SOAP_FMAC4 soap_get_SOAP_ENC__base64(struct soap*, struct SOAP_ENC__base64 *, const char*, const char*);

inline int soap_read_SOAP_ENC__base64(struct soap *soap, struct SOAP_ENC__base64 *p)
{
	if (p)
	{	soap_default_SOAP_ENC__base64(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENC__base64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_Array20Offloat_DEFINED
#define SOAP_TYPE_Array20Offloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array20Offloat(struct soap*, float[20]);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array20Offloat(struct soap*, float const[20]);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array20Offloat(struct soap*, const char*, int, float const[20], const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_Array20Offloat(struct soap*, const char*, float[20], const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array20Offloat(struct soap*, float const[20], const char*, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_Array20Offloat(struct soap*, float[20], const char*, const char*);
#endif

#endif

/* End of soapH.h */
