/* soapserviceProxy.cpp
   Generated by gSOAP 2.8.34 for service.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapserviceProxy.h"

serviceProxy::serviceProxy() : soap(SOAP_IO_DEFAULT)
{	serviceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

serviceProxy::serviceProxy(const serviceProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

serviceProxy::serviceProxy(const struct soap &_soap) : soap(_soap)
{ }

serviceProxy::serviceProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	serviceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

serviceProxy::serviceProxy(soap_mode iomode) : soap(iomode)
{	serviceProxy_init(iomode, iomode);
}

serviceProxy::serviceProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	serviceProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

serviceProxy::serviceProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	serviceProxy_init(imode, omode);
}

serviceProxy::~serviceProxy()
{
	this->destroy();
	}

void serviceProxy::serviceProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns", "http://localhost:8089/service.wsdl", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
serviceProxy *serviceProxy::copy()
{	serviceProxy *dup = SOAP_NEW_COPY(serviceProxy(*(struct soap*)this));
	return dup;
}
#endif

serviceProxy& serviceProxy::operator=(const serviceProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void serviceProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void serviceProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	serviceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void serviceProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *serviceProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *serviceProxy::soap_fault()
{	return this->fault;
}

const char *serviceProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *serviceProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int serviceProxy::soap_close_socket()
{	return soap_closesock(this);
}

int serviceProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void serviceProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void serviceProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *serviceProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int serviceProxy::getFileService(const char *endpoint, const char *soap_action, struct ns__TempleFiles in, int &result)
{	struct soap *soap = this;
	struct ns__getFileService soap_tmp_ns__getFileService;
	struct ns__getFileServiceResponse *soap_tmp_ns__getFileServiceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_tmp_ns__getFileService.in = in;
	soap_begin(soap);
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__getFileService(soap, &soap_tmp_ns__getFileService);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getFileService(soap, &soap_tmp_ns__getFileService, "ns:getFileService", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getFileService(soap, &soap_tmp_ns__getFileService, "ns:getFileService", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<int*>(&result)) // NULL ref?
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__getFileServiceResponse = soap_get_ns__getFileServiceResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__getFileServiceResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__getFileServiceResponse->result;
	return soap_closesock(soap);
}

int serviceProxy::TempleMatchService(const char *endpoint, const char *soap_action, struct ns__TempleMatchPARA inPara, struct ns__TempleMatchOUT &outPara)
{	struct soap *soap = this;
	struct ns__TempleMatchService soap_tmp_ns__TempleMatchService;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_tmp_ns__TempleMatchService.inPara = inPara;
	soap_begin(soap);
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__TempleMatchService(soap, &soap_tmp_ns__TempleMatchService);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__TempleMatchService(soap, &soap_tmp_ns__TempleMatchService, "ns:TempleMatchService", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__TempleMatchService(soap, &soap_tmp_ns__TempleMatchService, "ns:TempleMatchService", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<struct ns__TempleMatchOUT*>(&outPara)) // NULL ref?
		return soap_closesock(soap);
	soap_default_ns__TempleMatchOUT(soap, &outPara);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns__TempleMatchOUT(soap, &outPara, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int serviceProxy::getCCalibrationXYZFile(const char *endpoint, const char *soap_action, struct SOAP_ENC__base64 inFile, int &result)
{	struct soap *soap = this;
	struct ns__getCCalibrationXYZFile soap_tmp_ns__getCCalibrationXYZFile;
	struct ns__getCCalibrationXYZFileResponse *soap_tmp_ns__getCCalibrationXYZFileResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_tmp_ns__getCCalibrationXYZFile.inFile = inFile;
	soap_begin(soap);
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__getCCalibrationXYZFile(soap, &soap_tmp_ns__getCCalibrationXYZFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getCCalibrationXYZFile(soap, &soap_tmp_ns__getCCalibrationXYZFile, "ns:getCCalibrationXYZFile", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getCCalibrationXYZFile(soap, &soap_tmp_ns__getCCalibrationXYZFile, "ns:getCCalibrationXYZFile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<int*>(&result)) // NULL ref?
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__getCCalibrationXYZFileResponse = soap_get_ns__getCCalibrationXYZFileResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__getCCalibrationXYZFileResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns__getCCalibrationXYZFileResponse->result;
	return soap_closesock(soap);
}

int serviceProxy::CCalibrationXYZNewService(const char *endpoint, const char *soap_action, struct ns__CCalibrationXYZNewPARA inPara, struct ns__CCalibrationXYZNewOUT &outPara)
{	struct soap *soap = this;
	struct ns__CCalibrationXYZNewService soap_tmp_ns__CCalibrationXYZNewService;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_tmp_ns__CCalibrationXYZNewService.inPara = inPara;
	soap_begin(soap);
	soap_set_version(soap, 2); /* SOAP1.2 */
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__CCalibrationXYZNewService(soap, &soap_tmp_ns__CCalibrationXYZNewService);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__CCalibrationXYZNewService(soap, &soap_tmp_ns__CCalibrationXYZNewService, "ns:CCalibrationXYZNewService", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__CCalibrationXYZNewService(soap, &soap_tmp_ns__CCalibrationXYZNewService, "ns:CCalibrationXYZNewService", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<struct ns__CCalibrationXYZNewOUT*>(&outPara)) // NULL ref?
		return soap_closesock(soap);
	soap_default_ns__CCalibrationXYZNewOUT(soap, &outPara);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns__CCalibrationXYZNewOUT(soap, &outPara, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
