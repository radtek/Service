/* soapC.cpp
   Generated by gSOAP 2.8.34 for service.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.34 2017-08-20 07:18:10 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_ns__CCalibrationXYZNewService:
		return soap_in_ns__CCalibrationXYZNewService(soap, NULL, NULL, "ns:CCalibrationXYZNewService");
	case SOAP_TYPE_ns__getCCalibrationXYZFile:
		return soap_in_ns__getCCalibrationXYZFile(soap, NULL, NULL, "ns:getCCalibrationXYZFile");
	case SOAP_TYPE_ns__getCCalibrationXYZFileResponse:
		return soap_in_ns__getCCalibrationXYZFileResponse(soap, NULL, NULL, "ns:getCCalibrationXYZFileResponse");
	case SOAP_TYPE_ns__TempleMatchService:
		return soap_in_ns__TempleMatchService(soap, NULL, NULL, "ns:TempleMatchService");
	case SOAP_TYPE_ns__getFileService:
		return soap_in_ns__getFileService(soap, NULL, NULL, "ns:getFileService");
	case SOAP_TYPE_ns__getFileServiceResponse:
		return soap_in_ns__getFileServiceResponse(soap, NULL, NULL, "ns:getFileServiceResponse");
	case SOAP_TYPE_ns__CCalibrationXYZNewOUT:
		return soap_in_ns__CCalibrationXYZNewOUT(soap, NULL, NULL, "ns:CCalibrationXYZNewOUT");
	case SOAP_TYPE_ns__CCalibrationXYZNewPARA:
		return soap_in_ns__CCalibrationXYZNewPARA(soap, NULL, NULL, "ns:CCalibrationXYZNewPARA");
	case SOAP_TYPE_ns__TempleMatchOUT:
		return soap_in_ns__TempleMatchOUT(soap, NULL, NULL, "ns:TempleMatchOUT");
	case SOAP_TYPE_ns__TempleMatchPARA:
		return soap_in_ns__TempleMatchPARA(soap, NULL, NULL, "ns:TempleMatchPARA");
	case SOAP_TYPE_ns__TempleFiles:
		return soap_in_ns__TempleFiles(soap, NULL, NULL, "ns:TempleFiles");
	case SOAP_TYPE_SOAP_ENC__base64:
		return soap_in_SOAP_ENC__base64(soap, NULL, NULL, "SOAP-ENC:base64");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_Array20Offloat:
		return soap_in_Array20Offloat(soap, NULL, NULL, "xsd:float");
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:CCalibrationXYZNewService"))
		{	*type = SOAP_TYPE_ns__CCalibrationXYZNewService;
			return soap_in_ns__CCalibrationXYZNewService(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getCCalibrationXYZFile"))
		{	*type = SOAP_TYPE_ns__getCCalibrationXYZFile;
			return soap_in_ns__getCCalibrationXYZFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getCCalibrationXYZFileResponse"))
		{	*type = SOAP_TYPE_ns__getCCalibrationXYZFileResponse;
			return soap_in_ns__getCCalibrationXYZFileResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:TempleMatchService"))
		{	*type = SOAP_TYPE_ns__TempleMatchService;
			return soap_in_ns__TempleMatchService(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getFileService"))
		{	*type = SOAP_TYPE_ns__getFileService;
			return soap_in_ns__getFileService(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getFileServiceResponse"))
		{	*type = SOAP_TYPE_ns__getFileServiceResponse;
			return soap_in_ns__getFileServiceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:CCalibrationXYZNewOUT"))
		{	*type = SOAP_TYPE_ns__CCalibrationXYZNewOUT;
			return soap_in_ns__CCalibrationXYZNewOUT(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:CCalibrationXYZNewPARA"))
		{	*type = SOAP_TYPE_ns__CCalibrationXYZNewPARA;
			return soap_in_ns__CCalibrationXYZNewPARA(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:TempleMatchOUT"))
		{	*type = SOAP_TYPE_ns__TempleMatchOUT;
			return soap_in_ns__TempleMatchOUT(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:TempleMatchPARA"))
		{	*type = SOAP_TYPE_ns__TempleMatchPARA;
			return soap_in_ns__TempleMatchPARA(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:TempleFiles"))
		{	*type = SOAP_TYPE_ns__TempleFiles;
			return soap_in_ns__TempleFiles(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENC:base64"))
		{	*type = SOAP_TYPE_SOAP_ENC__base64;
			return soap_in_SOAP_ENC__base64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_Array20Offloat;
			return soap_in_Array20Offloat(soap, NULL, NULL, NULL);
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_ns__CCalibrationXYZNewService:
		return soap_out_ns__CCalibrationXYZNewService(soap, tag, id, (const struct ns__CCalibrationXYZNewService *)ptr, "ns:CCalibrationXYZNewService");
	case SOAP_TYPE_ns__getCCalibrationXYZFile:
		return soap_out_ns__getCCalibrationXYZFile(soap, tag, id, (const struct ns__getCCalibrationXYZFile *)ptr, "ns:getCCalibrationXYZFile");
	case SOAP_TYPE_ns__getCCalibrationXYZFileResponse:
		return soap_out_ns__getCCalibrationXYZFileResponse(soap, tag, id, (const struct ns__getCCalibrationXYZFileResponse *)ptr, "ns:getCCalibrationXYZFileResponse");
	case SOAP_TYPE_ns__TempleMatchService:
		return soap_out_ns__TempleMatchService(soap, tag, id, (const struct ns__TempleMatchService *)ptr, "ns:TempleMatchService");
	case SOAP_TYPE_ns__getFileService:
		return soap_out_ns__getFileService(soap, tag, id, (const struct ns__getFileService *)ptr, "ns:getFileService");
	case SOAP_TYPE_ns__getFileServiceResponse:
		return soap_out_ns__getFileServiceResponse(soap, tag, id, (const struct ns__getFileServiceResponse *)ptr, "ns:getFileServiceResponse");
	case SOAP_TYPE_ns__CCalibrationXYZNewOUT:
		return soap_out_ns__CCalibrationXYZNewOUT(soap, tag, id, (const struct ns__CCalibrationXYZNewOUT *)ptr, "ns:CCalibrationXYZNewOUT");
	case SOAP_TYPE_ns__CCalibrationXYZNewPARA:
		return soap_out_ns__CCalibrationXYZNewPARA(soap, tag, id, (const struct ns__CCalibrationXYZNewPARA *)ptr, "ns:CCalibrationXYZNewPARA");
	case SOAP_TYPE_ns__TempleMatchOUT:
		return soap_out_ns__TempleMatchOUT(soap, tag, id, (const struct ns__TempleMatchOUT *)ptr, "ns:TempleMatchOUT");
	case SOAP_TYPE_ns__TempleMatchPARA:
		return soap_out_ns__TempleMatchPARA(soap, tag, id, (const struct ns__TempleMatchPARA *)ptr, "ns:TempleMatchPARA");
	case SOAP_TYPE_ns__TempleFiles:
		return soap_out_ns__TempleFiles(soap, tag, id, (const struct ns__TempleFiles *)ptr, "ns:TempleFiles");
	case SOAP_TYPE_SOAP_ENC__base64:
		return soap_out_SOAP_ENC__base64(soap, tag, id, (const struct SOAP_ENC__base64 *)ptr, "SOAP-ENC:base64");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case SOAP_TYPE_Array20Offloat:
		return soap_out_Array20Offloat(soap, tag, id, (float (*))ptr, "xsd:float");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__CCalibrationXYZNewService:
		soap_serialize_ns__CCalibrationXYZNewService(soap, (const struct ns__CCalibrationXYZNewService *)ptr);
		break;
	case SOAP_TYPE_ns__getCCalibrationXYZFile:
		soap_serialize_ns__getCCalibrationXYZFile(soap, (const struct ns__getCCalibrationXYZFile *)ptr);
		break;
	case SOAP_TYPE_ns__getCCalibrationXYZFileResponse:
		soap_serialize_ns__getCCalibrationXYZFileResponse(soap, (const struct ns__getCCalibrationXYZFileResponse *)ptr);
		break;
	case SOAP_TYPE_ns__TempleMatchService:
		soap_serialize_ns__TempleMatchService(soap, (const struct ns__TempleMatchService *)ptr);
		break;
	case SOAP_TYPE_ns__getFileService:
		soap_serialize_ns__getFileService(soap, (const struct ns__getFileService *)ptr);
		break;
	case SOAP_TYPE_ns__getFileServiceResponse:
		soap_serialize_ns__getFileServiceResponse(soap, (const struct ns__getFileServiceResponse *)ptr);
		break;
	case SOAP_TYPE_ns__CCalibrationXYZNewOUT:
		soap_serialize_ns__CCalibrationXYZNewOUT(soap, (const struct ns__CCalibrationXYZNewOUT *)ptr);
		break;
	case SOAP_TYPE_ns__CCalibrationXYZNewPARA:
		soap_serialize_ns__CCalibrationXYZNewPARA(soap, (const struct ns__CCalibrationXYZNewPARA *)ptr);
		break;
	case SOAP_TYPE_ns__TempleMatchOUT:
		soap_serialize_ns__TempleMatchOUT(soap, (const struct ns__TempleMatchOUT *)ptr);
		break;
	case SOAP_TYPE_ns__TempleMatchPARA:
		soap_serialize_ns__TempleMatchPARA(soap, (const struct ns__TempleMatchPARA *)ptr);
		break;
	case SOAP_TYPE_ns__TempleFiles:
		soap_serialize_ns__TempleFiles(soap, (const struct ns__TempleFiles *)ptr);
		break;
	case SOAP_TYPE_SOAP_ENC__base64:
		soap_serialize_SOAP_ENC__base64(soap, (const struct SOAP_ENC__base64 *)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_SOAP_ENC__base64:
		return (void*)soap_instantiate_SOAP_ENC__base64(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__TempleFiles:
		return (void*)soap_instantiate_ns__TempleFiles(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__TempleMatchPARA:
		return (void*)soap_instantiate_ns__TempleMatchPARA(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__TempleMatchOUT:
		return (void*)soap_instantiate_ns__TempleMatchOUT(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__CCalibrationXYZNewPARA:
		return (void*)soap_instantiate_ns__CCalibrationXYZNewPARA(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__CCalibrationXYZNewOUT:
		return (void*)soap_instantiate_ns__CCalibrationXYZNewOUT(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getFileServiceResponse:
		return (void*)soap_instantiate_ns__getFileServiceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getFileService:
		return (void*)soap_instantiate_ns__getFileService(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__TempleMatchService:
		return (void*)soap_instantiate_ns__TempleMatchService(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getCCalibrationXYZFileResponse:
		return (void*)soap_instantiate_ns__getCCalibrationXYZFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getCCalibrationXYZFile:
		return (void*)soap_instantiate_ns__getCCalibrationXYZFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__CCalibrationXYZNewService:
		return (void*)soap_instantiate_ns__CCalibrationXYZNewService(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_SOAP_ENC__base64:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENC__base64*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENC__base64*>(p->ptr));
		break;
	case SOAP_TYPE_ns__TempleFiles:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__TempleFiles*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__TempleFiles*>(p->ptr));
		break;
	case SOAP_TYPE_ns__TempleMatchPARA:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__TempleMatchPARA*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__TempleMatchPARA*>(p->ptr));
		break;
	case SOAP_TYPE_ns__TempleMatchOUT:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__TempleMatchOUT*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__TempleMatchOUT*>(p->ptr));
		break;
	case SOAP_TYPE_ns__CCalibrationXYZNewPARA:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__CCalibrationXYZNewPARA*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__CCalibrationXYZNewPARA*>(p->ptr));
		break;
	case SOAP_TYPE_ns__CCalibrationXYZNewOUT:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__CCalibrationXYZNewOUT*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__CCalibrationXYZNewOUT*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getFileServiceResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getFileServiceResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getFileServiceResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getFileService:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getFileService*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getFileService*>(p->ptr));
		break;
	case SOAP_TYPE_ns__TempleMatchService:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__TempleMatchService*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__TempleMatchService*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getCCalibrationXYZFileResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getCCalibrationXYZFileResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getCCalibrationXYZFileResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getCCalibrationXYZFile:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getCCalibrationXYZFile*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getCCalibrationXYZFile*>(p->ptr));
		break;
	case SOAP_TYPE_ns__CCalibrationXYZNewService:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__CCalibrationXYZNewService*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__CCalibrationXYZNewService*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_SOAP_ENC__base64:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENC__base64 type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENC__base64*)p = *(struct SOAP_ENC__base64*)q;
		break;
	case SOAP_TYPE_ns__TempleFiles:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__TempleFiles type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__TempleFiles*)p = *(struct ns__TempleFiles*)q;
		break;
	case SOAP_TYPE_ns__TempleMatchPARA:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__TempleMatchPARA type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__TempleMatchPARA*)p = *(struct ns__TempleMatchPARA*)q;
		break;
	case SOAP_TYPE_ns__TempleMatchOUT:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__TempleMatchOUT type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__TempleMatchOUT*)p = *(struct ns__TempleMatchOUT*)q;
		break;
	case SOAP_TYPE_ns__CCalibrationXYZNewPARA:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__CCalibrationXYZNewPARA type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__CCalibrationXYZNewPARA*)p = *(struct ns__CCalibrationXYZNewPARA*)q;
		break;
	case SOAP_TYPE_ns__CCalibrationXYZNewOUT:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__CCalibrationXYZNewOUT type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__CCalibrationXYZNewOUT*)p = *(struct ns__CCalibrationXYZNewOUT*)q;
		break;
	case SOAP_TYPE_ns__getFileServiceResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__getFileServiceResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__getFileServiceResponse*)p = *(struct ns__getFileServiceResponse*)q;
		break;
	case SOAP_TYPE_ns__getFileService:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__getFileService type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__getFileService*)p = *(struct ns__getFileService*)q;
		break;
	case SOAP_TYPE_ns__TempleMatchService:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__TempleMatchService type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__TempleMatchService*)p = *(struct ns__TempleMatchService*)q;
		break;
	case SOAP_TYPE_ns__getCCalibrationXYZFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__getCCalibrationXYZFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__getCCalibrationXYZFileResponse*)p = *(struct ns__getCCalibrationXYZFileResponse*)q;
		break;
	case SOAP_TYPE_ns__getCCalibrationXYZFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__getCCalibrationXYZFile type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__getCCalibrationXYZFile*)p = *(struct ns__getCCalibrationXYZFile*)q;
		break;
	case SOAP_TYPE_ns__CCalibrationXYZNewService:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns__CCalibrationXYZNewService type=%d location=%p object=%p\n", t, p, q));
		*(struct ns__CCalibrationXYZNewService*)p = *(struct ns__CCalibrationXYZNewService*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	a = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	if (soap_out_float(soap, tag ? tag : "float", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CCalibrationXYZNewService(struct soap *soap, struct ns__CCalibrationXYZNewService *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__CCalibrationXYZNewPARA(soap, &a->inPara);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CCalibrationXYZNewService(struct soap *soap, const struct ns__CCalibrationXYZNewService *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns__CCalibrationXYZNewPARA(soap, &a->inPara);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CCalibrationXYZNewService(struct soap *soap, const char *tag, int id, const struct ns__CCalibrationXYZNewService *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__CCalibrationXYZNewService), type))
		return soap->error;
	if (soap_out_ns__CCalibrationXYZNewPARA(soap, "inPara", -1, &a->inPara, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__CCalibrationXYZNewService * SOAP_FMAC4 soap_in_ns__CCalibrationXYZNewService(struct soap *soap, const char *tag, struct ns__CCalibrationXYZNewService *a, const char *type)
{
	size_t soap_flag_inPara = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__CCalibrationXYZNewService *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__CCalibrationXYZNewService, sizeof(struct ns__CCalibrationXYZNewService), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__CCalibrationXYZNewService(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_inPara && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__CCalibrationXYZNewPARA(soap, "inPara", &a->inPara, "ns:CCalibrationXYZNewPARA"))
				{	soap_flag_inPara--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_inPara > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__CCalibrationXYZNewService *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__CCalibrationXYZNewService, SOAP_TYPE_ns__CCalibrationXYZNewService, sizeof(struct ns__CCalibrationXYZNewService), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__CCalibrationXYZNewService * SOAP_FMAC2 soap_instantiate_ns__CCalibrationXYZNewService(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__CCalibrationXYZNewService(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__CCalibrationXYZNewService *p;
	size_t k = sizeof(struct ns__CCalibrationXYZNewService);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__CCalibrationXYZNewService);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__CCalibrationXYZNewService, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__CCalibrationXYZNewService location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__CCalibrationXYZNewService, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CCalibrationXYZNewService(struct soap *soap, const struct ns__CCalibrationXYZNewService *a, const char *tag, const char *type)
{
	if (soap_out_ns__CCalibrationXYZNewService(soap, tag ? tag : "ns:CCalibrationXYZNewService", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__CCalibrationXYZNewService * SOAP_FMAC4 soap_get_ns__CCalibrationXYZNewService(struct soap *soap, struct ns__CCalibrationXYZNewService *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__CCalibrationXYZNewService(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getCCalibrationXYZFile(struct soap *soap, struct ns__getCCalibrationXYZFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__base64(soap, &a->inFile);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getCCalibrationXYZFile(struct soap *soap, const struct ns__getCCalibrationXYZFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__base64(soap, &a->inFile);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getCCalibrationXYZFile(struct soap *soap, const char *tag, int id, const struct ns__getCCalibrationXYZFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getCCalibrationXYZFile), type))
		return soap->error;
	if (soap_out_SOAP_ENC__base64(soap, "inFile", -1, &a->inFile, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getCCalibrationXYZFile * SOAP_FMAC4 soap_in_ns__getCCalibrationXYZFile(struct soap *soap, const char *tag, struct ns__getCCalibrationXYZFile *a, const char *type)
{
	size_t soap_flag_inFile = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getCCalibrationXYZFile *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getCCalibrationXYZFile, sizeof(struct ns__getCCalibrationXYZFile), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getCCalibrationXYZFile(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_inFile && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SOAP_ENC__base64(soap, "inFile", &a->inFile, "SOAP-ENC:base64"))
				{	soap_flag_inFile--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_inFile > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__getCCalibrationXYZFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getCCalibrationXYZFile, SOAP_TYPE_ns__getCCalibrationXYZFile, sizeof(struct ns__getCCalibrationXYZFile), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__getCCalibrationXYZFile * SOAP_FMAC2 soap_instantiate_ns__getCCalibrationXYZFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getCCalibrationXYZFile(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__getCCalibrationXYZFile *p;
	size_t k = sizeof(struct ns__getCCalibrationXYZFile);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__getCCalibrationXYZFile);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__getCCalibrationXYZFile, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__getCCalibrationXYZFile location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__getCCalibrationXYZFile, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getCCalibrationXYZFile(struct soap *soap, const struct ns__getCCalibrationXYZFile *a, const char *tag, const char *type)
{
	if (soap_out_ns__getCCalibrationXYZFile(soap, tag ? tag : "ns:getCCalibrationXYZFile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getCCalibrationXYZFile * SOAP_FMAC4 soap_get_ns__getCCalibrationXYZFile(struct soap *soap, struct ns__getCCalibrationXYZFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getCCalibrationXYZFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getCCalibrationXYZFileResponse(struct soap *soap, struct ns__getCCalibrationXYZFileResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getCCalibrationXYZFileResponse(struct soap *soap, const struct ns__getCCalibrationXYZFileResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getCCalibrationXYZFileResponse(struct soap *soap, const char *tag, int id, const struct ns__getCCalibrationXYZFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getCCalibrationXYZFileResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getCCalibrationXYZFileResponse * SOAP_FMAC4 soap_in_ns__getCCalibrationXYZFileResponse(struct soap *soap, const char *tag, struct ns__getCCalibrationXYZFileResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getCCalibrationXYZFileResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getCCalibrationXYZFileResponse, sizeof(struct ns__getCCalibrationXYZFileResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getCCalibrationXYZFileResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__getCCalibrationXYZFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getCCalibrationXYZFileResponse, SOAP_TYPE_ns__getCCalibrationXYZFileResponse, sizeof(struct ns__getCCalibrationXYZFileResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__getCCalibrationXYZFileResponse * SOAP_FMAC2 soap_instantiate_ns__getCCalibrationXYZFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getCCalibrationXYZFileResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__getCCalibrationXYZFileResponse *p;
	size_t k = sizeof(struct ns__getCCalibrationXYZFileResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__getCCalibrationXYZFileResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__getCCalibrationXYZFileResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__getCCalibrationXYZFileResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__getCCalibrationXYZFileResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getCCalibrationXYZFileResponse(struct soap *soap, const struct ns__getCCalibrationXYZFileResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns__getCCalibrationXYZFileResponse(soap, tag ? tag : "ns:getCCalibrationXYZFileResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getCCalibrationXYZFileResponse * SOAP_FMAC4 soap_get_ns__getCCalibrationXYZFileResponse(struct soap *soap, struct ns__getCCalibrationXYZFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getCCalibrationXYZFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TempleMatchService(struct soap *soap, struct ns__TempleMatchService *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__TempleMatchPARA(soap, &a->inPara);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__TempleMatchService(struct soap *soap, const struct ns__TempleMatchService *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns__TempleMatchPARA(soap, &a->inPara);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TempleMatchService(struct soap *soap, const char *tag, int id, const struct ns__TempleMatchService *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__TempleMatchService), type))
		return soap->error;
	if (soap_out_ns__TempleMatchPARA(soap, "inPara", -1, &a->inPara, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__TempleMatchService * SOAP_FMAC4 soap_in_ns__TempleMatchService(struct soap *soap, const char *tag, struct ns__TempleMatchService *a, const char *type)
{
	size_t soap_flag_inPara = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__TempleMatchService *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__TempleMatchService, sizeof(struct ns__TempleMatchService), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__TempleMatchService(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_inPara && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__TempleMatchPARA(soap, "inPara", &a->inPara, "ns:TempleMatchPARA"))
				{	soap_flag_inPara--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_inPara > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__TempleMatchService *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__TempleMatchService, SOAP_TYPE_ns__TempleMatchService, sizeof(struct ns__TempleMatchService), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__TempleMatchService * SOAP_FMAC2 soap_instantiate_ns__TempleMatchService(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__TempleMatchService(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__TempleMatchService *p;
	size_t k = sizeof(struct ns__TempleMatchService);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__TempleMatchService);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__TempleMatchService, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__TempleMatchService location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__TempleMatchService, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TempleMatchService(struct soap *soap, const struct ns__TempleMatchService *a, const char *tag, const char *type)
{
	if (soap_out_ns__TempleMatchService(soap, tag ? tag : "ns:TempleMatchService", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__TempleMatchService * SOAP_FMAC4 soap_get_ns__TempleMatchService(struct soap *soap, struct ns__TempleMatchService *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__TempleMatchService(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getFileService(struct soap *soap, struct ns__getFileService *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__TempleFiles(soap, &a->in);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getFileService(struct soap *soap, const struct ns__getFileService *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns__TempleFiles(soap, &a->in);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getFileService(struct soap *soap, const char *tag, int id, const struct ns__getFileService *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getFileService), type))
		return soap->error;
	if (soap_out_ns__TempleFiles(soap, "in", -1, &a->in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getFileService * SOAP_FMAC4 soap_in_ns__getFileService(struct soap *soap, const char *tag, struct ns__getFileService *a, const char *type)
{
	size_t soap_flag_in = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getFileService *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getFileService, sizeof(struct ns__getFileService), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getFileService(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__TempleFiles(soap, "in", &a->in, "ns:TempleFiles"))
				{	soap_flag_in--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__getFileService *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getFileService, SOAP_TYPE_ns__getFileService, sizeof(struct ns__getFileService), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__getFileService * SOAP_FMAC2 soap_instantiate_ns__getFileService(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getFileService(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__getFileService *p;
	size_t k = sizeof(struct ns__getFileService);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__getFileService);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__getFileService, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__getFileService location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__getFileService, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getFileService(struct soap *soap, const struct ns__getFileService *a, const char *tag, const char *type)
{
	if (soap_out_ns__getFileService(soap, tag ? tag : "ns:getFileService", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getFileService * SOAP_FMAC4 soap_get_ns__getFileService(struct soap *soap, struct ns__getFileService *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getFileService(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getFileServiceResponse(struct soap *soap, struct ns__getFileServiceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getFileServiceResponse(struct soap *soap, const struct ns__getFileServiceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getFileServiceResponse(struct soap *soap, const char *tag, int id, const struct ns__getFileServiceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getFileServiceResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getFileServiceResponse * SOAP_FMAC4 soap_in_ns__getFileServiceResponse(struct soap *soap, const char *tag, struct ns__getFileServiceResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getFileServiceResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getFileServiceResponse, sizeof(struct ns__getFileServiceResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getFileServiceResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__getFileServiceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getFileServiceResponse, SOAP_TYPE_ns__getFileServiceResponse, sizeof(struct ns__getFileServiceResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__getFileServiceResponse * SOAP_FMAC2 soap_instantiate_ns__getFileServiceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getFileServiceResponse(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__getFileServiceResponse *p;
	size_t k = sizeof(struct ns__getFileServiceResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__getFileServiceResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__getFileServiceResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__getFileServiceResponse location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__getFileServiceResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getFileServiceResponse(struct soap *soap, const struct ns__getFileServiceResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns__getFileServiceResponse(soap, tag ? tag : "ns:getFileServiceResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getFileServiceResponse * SOAP_FMAC4 soap_get_ns__getFileServiceResponse(struct soap *soap, struct ns__getFileServiceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getFileServiceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CCalibrationXYZNewOUT(struct soap *soap, struct ns__CCalibrationXYZNewOUT *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_Array20Offloat(soap, a->CalibrationX);
	soap_default_Array20Offloat(soap, a->CalibrationY);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CCalibrationXYZNewOUT(struct soap *soap, const struct ns__CCalibrationXYZNewOUT *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_Array20Offloat(soap, a->CalibrationX);
	soap_serialize_Array20Offloat(soap, a->CalibrationY);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CCalibrationXYZNewOUT(struct soap *soap, const char *tag, int id, const struct ns__CCalibrationXYZNewOUT *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__CCalibrationXYZNewOUT), type))
		return soap->error;
	soap_out_Array20Offloat(soap, "CalibrationX", -1, a->CalibrationX, "");
	soap_out_Array20Offloat(soap, "CalibrationY", -1, a->CalibrationY, "");
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__CCalibrationXYZNewOUT * SOAP_FMAC4 soap_in_ns__CCalibrationXYZNewOUT(struct soap *soap, const char *tag, struct ns__CCalibrationXYZNewOUT *a, const char *type)
{
	size_t soap_flag_CalibrationX = 1;
	size_t soap_flag_CalibrationY = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__CCalibrationXYZNewOUT *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__CCalibrationXYZNewOUT, sizeof(struct ns__CCalibrationXYZNewOUT), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__CCalibrationXYZNewOUT(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CalibrationX && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array20Offloat(soap, "CalibrationX", a->CalibrationX, "xsd:float"))
				{	soap_flag_CalibrationX--;
					continue;
				}
			if (soap_flag_CalibrationY && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array20Offloat(soap, "CalibrationY", a->CalibrationY, "xsd:float"))
				{	soap_flag_CalibrationY--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CalibrationX > 0 || soap_flag_CalibrationY > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__CCalibrationXYZNewOUT *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__CCalibrationXYZNewOUT, SOAP_TYPE_ns__CCalibrationXYZNewOUT, sizeof(struct ns__CCalibrationXYZNewOUT), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__CCalibrationXYZNewOUT * SOAP_FMAC2 soap_instantiate_ns__CCalibrationXYZNewOUT(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__CCalibrationXYZNewOUT(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__CCalibrationXYZNewOUT *p;
	size_t k = sizeof(struct ns__CCalibrationXYZNewOUT);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__CCalibrationXYZNewOUT);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__CCalibrationXYZNewOUT, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__CCalibrationXYZNewOUT location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__CCalibrationXYZNewOUT, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CCalibrationXYZNewOUT(struct soap *soap, const struct ns__CCalibrationXYZNewOUT *a, const char *tag, const char *type)
{
	if (soap_out_ns__CCalibrationXYZNewOUT(soap, tag ? tag : "ns:CCalibrationXYZNewOUT", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__CCalibrationXYZNewOUT * SOAP_FMAC4 soap_get_ns__CCalibrationXYZNewOUT(struct soap *soap, struct ns__CCalibrationXYZNewOUT *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__CCalibrationXYZNewOUT(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__CCalibrationXYZNewPARA(struct soap *soap, struct ns__CCalibrationXYZNewPARA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_Array20Offloat(soap, a->srcTriX);
	soap_default_Array20Offloat(soap, a->srcTriY);
	soap_default_int(soap, &a->number);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__CCalibrationXYZNewPARA(struct soap *soap, const struct ns__CCalibrationXYZNewPARA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_Array20Offloat(soap, a->srcTriX);
	soap_serialize_Array20Offloat(soap, a->srcTriY);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CCalibrationXYZNewPARA(struct soap *soap, const char *tag, int id, const struct ns__CCalibrationXYZNewPARA *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__CCalibrationXYZNewPARA), type))
		return soap->error;
	soap_out_Array20Offloat(soap, "srcTriX", -1, a->srcTriX, "");
	soap_out_Array20Offloat(soap, "srcTriY", -1, a->srcTriY, "");
	if (soap_out_int(soap, "number", -1, &a->number, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__CCalibrationXYZNewPARA * SOAP_FMAC4 soap_in_ns__CCalibrationXYZNewPARA(struct soap *soap, const char *tag, struct ns__CCalibrationXYZNewPARA *a, const char *type)
{
	size_t soap_flag_srcTriX = 1;
	size_t soap_flag_srcTriY = 1;
	size_t soap_flag_number = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__CCalibrationXYZNewPARA *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__CCalibrationXYZNewPARA, sizeof(struct ns__CCalibrationXYZNewPARA), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__CCalibrationXYZNewPARA(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_srcTriX && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array20Offloat(soap, "srcTriX", a->srcTriX, "xsd:float"))
				{	soap_flag_srcTriX--;
					continue;
				}
			if (soap_flag_srcTriY && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array20Offloat(soap, "srcTriY", a->srcTriY, "xsd:float"))
				{	soap_flag_srcTriY--;
					continue;
				}
			if (soap_flag_number && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "number", &a->number, "xsd:int"))
				{	soap_flag_number--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_srcTriX > 0 || soap_flag_srcTriY > 0 || soap_flag_number > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__CCalibrationXYZNewPARA *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__CCalibrationXYZNewPARA, SOAP_TYPE_ns__CCalibrationXYZNewPARA, sizeof(struct ns__CCalibrationXYZNewPARA), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__CCalibrationXYZNewPARA * SOAP_FMAC2 soap_instantiate_ns__CCalibrationXYZNewPARA(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__CCalibrationXYZNewPARA(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__CCalibrationXYZNewPARA *p;
	size_t k = sizeof(struct ns__CCalibrationXYZNewPARA);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__CCalibrationXYZNewPARA);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__CCalibrationXYZNewPARA, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__CCalibrationXYZNewPARA location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__CCalibrationXYZNewPARA, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__CCalibrationXYZNewPARA(struct soap *soap, const struct ns__CCalibrationXYZNewPARA *a, const char *tag, const char *type)
{
	if (soap_out_ns__CCalibrationXYZNewPARA(soap, tag ? tag : "ns:CCalibrationXYZNewPARA", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__CCalibrationXYZNewPARA * SOAP_FMAC4 soap_get_ns__CCalibrationXYZNewPARA(struct soap *soap, struct ns__CCalibrationXYZNewPARA *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__CCalibrationXYZNewPARA(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TempleMatchOUT(struct soap *soap, struct ns__TempleMatchOUT *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_Array20Offloat(soap, a->fcosts);
	soap_default_Array20Offloat(soap, a->fCenterCoordsX);
	soap_default_Array20Offloat(soap, a->fCenterCoordsY);
	soap_default_Array20Offloat(soap, a->fangles);
	soap_default_Array20Offloat(soap, a->ftempScales);
	soap_default_int(soap, &a->ioutNumber);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__TempleMatchOUT(struct soap *soap, const struct ns__TempleMatchOUT *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_Array20Offloat(soap, a->fcosts);
	soap_serialize_Array20Offloat(soap, a->fCenterCoordsX);
	soap_serialize_Array20Offloat(soap, a->fCenterCoordsY);
	soap_serialize_Array20Offloat(soap, a->fangles);
	soap_serialize_Array20Offloat(soap, a->ftempScales);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TempleMatchOUT(struct soap *soap, const char *tag, int id, const struct ns__TempleMatchOUT *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__TempleMatchOUT), type))
		return soap->error;
	soap_out_Array20Offloat(soap, "fcosts", -1, a->fcosts, "");
	soap_out_Array20Offloat(soap, "fCenterCoordsX", -1, a->fCenterCoordsX, "");
	soap_out_Array20Offloat(soap, "fCenterCoordsY", -1, a->fCenterCoordsY, "");
	soap_out_Array20Offloat(soap, "fangles", -1, a->fangles, "");
	soap_out_Array20Offloat(soap, "ftempScales", -1, a->ftempScales, "");
	if (soap_out_int(soap, "ioutNumber", -1, &a->ioutNumber, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__TempleMatchOUT * SOAP_FMAC4 soap_in_ns__TempleMatchOUT(struct soap *soap, const char *tag, struct ns__TempleMatchOUT *a, const char *type)
{
	size_t soap_flag_fcosts = 1;
	size_t soap_flag_fCenterCoordsX = 1;
	size_t soap_flag_fCenterCoordsY = 1;
	size_t soap_flag_fangles = 1;
	size_t soap_flag_ftempScales = 1;
	size_t soap_flag_ioutNumber = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__TempleMatchOUT *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__TempleMatchOUT, sizeof(struct ns__TempleMatchOUT), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__TempleMatchOUT(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fcosts && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array20Offloat(soap, "fcosts", a->fcosts, "xsd:float"))
				{	soap_flag_fcosts--;
					continue;
				}
			if (soap_flag_fCenterCoordsX && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array20Offloat(soap, "fCenterCoordsX", a->fCenterCoordsX, "xsd:float"))
				{	soap_flag_fCenterCoordsX--;
					continue;
				}
			if (soap_flag_fCenterCoordsY && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array20Offloat(soap, "fCenterCoordsY", a->fCenterCoordsY, "xsd:float"))
				{	soap_flag_fCenterCoordsY--;
					continue;
				}
			if (soap_flag_fangles && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array20Offloat(soap, "fangles", a->fangles, "xsd:float"))
				{	soap_flag_fangles--;
					continue;
				}
			if (soap_flag_ftempScales && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array20Offloat(soap, "ftempScales", a->ftempScales, "xsd:float"))
				{	soap_flag_ftempScales--;
					continue;
				}
			if (soap_flag_ioutNumber && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ioutNumber", &a->ioutNumber, "xsd:int"))
				{	soap_flag_ioutNumber--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_fcosts > 0 || soap_flag_fCenterCoordsX > 0 || soap_flag_fCenterCoordsY > 0 || soap_flag_fangles > 0 || soap_flag_ftempScales > 0 || soap_flag_ioutNumber > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__TempleMatchOUT *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__TempleMatchOUT, SOAP_TYPE_ns__TempleMatchOUT, sizeof(struct ns__TempleMatchOUT), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__TempleMatchOUT * SOAP_FMAC2 soap_instantiate_ns__TempleMatchOUT(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__TempleMatchOUT(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__TempleMatchOUT *p;
	size_t k = sizeof(struct ns__TempleMatchOUT);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__TempleMatchOUT);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__TempleMatchOUT, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__TempleMatchOUT location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__TempleMatchOUT, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TempleMatchOUT(struct soap *soap, const struct ns__TempleMatchOUT *a, const char *tag, const char *type)
{
	if (soap_out_ns__TempleMatchOUT(soap, tag ? tag : "ns:TempleMatchOUT", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__TempleMatchOUT * SOAP_FMAC4 soap_get_ns__TempleMatchOUT(struct soap *soap, struct ns__TempleMatchOUT *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__TempleMatchOUT(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TempleMatchPARA(struct soap *soap, struct ns__TempleMatchPARA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__base64(soap, &a->imggray);
	soap_default_int(soap, &a->widthImg);
	soap_default_int(soap, &a->heightImg);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__TempleMatchPARA(struct soap *soap, const struct ns__TempleMatchPARA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__base64(soap, &a->imggray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TempleMatchPARA(struct soap *soap, const char *tag, int id, const struct ns__TempleMatchPARA *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__TempleMatchPARA), type))
		return soap->error;
	if (soap_out_SOAP_ENC__base64(soap, "imggray", -1, &a->imggray, ""))
		return soap->error;
	if (soap_out_int(soap, "widthImg", -1, &a->widthImg, ""))
		return soap->error;
	if (soap_out_int(soap, "heightImg", -1, &a->heightImg, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__TempleMatchPARA * SOAP_FMAC4 soap_in_ns__TempleMatchPARA(struct soap *soap, const char *tag, struct ns__TempleMatchPARA *a, const char *type)
{
	size_t soap_flag_imggray = 1;
	size_t soap_flag_widthImg = 1;
	size_t soap_flag_heightImg = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__TempleMatchPARA *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__TempleMatchPARA, sizeof(struct ns__TempleMatchPARA), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__TempleMatchPARA(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_imggray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SOAP_ENC__base64(soap, "imggray", &a->imggray, "SOAP-ENC:base64"))
				{	soap_flag_imggray--;
					continue;
				}
			if (soap_flag_widthImg && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "widthImg", &a->widthImg, "xsd:int"))
				{	soap_flag_widthImg--;
					continue;
				}
			if (soap_flag_heightImg && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "heightImg", &a->heightImg, "xsd:int"))
				{	soap_flag_heightImg--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_imggray > 0 || soap_flag_widthImg > 0 || soap_flag_heightImg > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__TempleMatchPARA *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__TempleMatchPARA, SOAP_TYPE_ns__TempleMatchPARA, sizeof(struct ns__TempleMatchPARA), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__TempleMatchPARA * SOAP_FMAC2 soap_instantiate_ns__TempleMatchPARA(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__TempleMatchPARA(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__TempleMatchPARA *p;
	size_t k = sizeof(struct ns__TempleMatchPARA);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__TempleMatchPARA);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__TempleMatchPARA, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__TempleMatchPARA location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__TempleMatchPARA, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TempleMatchPARA(struct soap *soap, const struct ns__TempleMatchPARA *a, const char *tag, const char *type)
{
	if (soap_out_ns__TempleMatchPARA(soap, tag ? tag : "ns:TempleMatchPARA", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__TempleMatchPARA * SOAP_FMAC4 soap_get_ns__TempleMatchPARA(struct soap *soap, struct ns__TempleMatchPARA *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__TempleMatchPARA(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TempleFiles(struct soap *soap, struct ns__TempleFiles *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SOAP_ENC__base64(soap, &a->image);
	soap_default_SOAP_ENC__base64(soap, &a->image2);
	soap_default_SOAP_ENC__base64(soap, &a->image3);
	soap_default_SOAP_ENC__base64(soap, &a->matchTemPlate);
	soap_default_SOAP_ENC__base64(soap, &a->tplgray);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__TempleFiles(struct soap *soap, const struct ns__TempleFiles *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENC__base64(soap, &a->image);
	soap_serialize_SOAP_ENC__base64(soap, &a->image2);
	soap_serialize_SOAP_ENC__base64(soap, &a->image3);
	soap_serialize_SOAP_ENC__base64(soap, &a->matchTemPlate);
	soap_serialize_SOAP_ENC__base64(soap, &a->tplgray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TempleFiles(struct soap *soap, const char *tag, int id, const struct ns__TempleFiles *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__TempleFiles), type))
		return soap->error;
	if (soap_out_SOAP_ENC__base64(soap, "image", -1, &a->image, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__base64(soap, "image2", -1, &a->image2, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__base64(soap, "image3", -1, &a->image3, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__base64(soap, "matchTemPlate", -1, &a->matchTemPlate, ""))
		return soap->error;
	if (soap_out_SOAP_ENC__base64(soap, "tplgray", -1, &a->tplgray, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__TempleFiles * SOAP_FMAC4 soap_in_ns__TempleFiles(struct soap *soap, const char *tag, struct ns__TempleFiles *a, const char *type)
{
	size_t soap_flag_image = 1;
	size_t soap_flag_image2 = 1;
	size_t soap_flag_image3 = 1;
	size_t soap_flag_matchTemPlate = 1;
	size_t soap_flag_tplgray = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__TempleFiles *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__TempleFiles, sizeof(struct ns__TempleFiles), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__TempleFiles(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_image && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SOAP_ENC__base64(soap, "image", &a->image, "SOAP-ENC:base64"))
				{	soap_flag_image--;
					continue;
				}
			if (soap_flag_image2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SOAP_ENC__base64(soap, "image2", &a->image2, "SOAP-ENC:base64"))
				{	soap_flag_image2--;
					continue;
				}
			if (soap_flag_image3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SOAP_ENC__base64(soap, "image3", &a->image3, "SOAP-ENC:base64"))
				{	soap_flag_image3--;
					continue;
				}
			if (soap_flag_matchTemPlate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SOAP_ENC__base64(soap, "matchTemPlate", &a->matchTemPlate, "SOAP-ENC:base64"))
				{	soap_flag_matchTemPlate--;
					continue;
				}
			if (soap_flag_tplgray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SOAP_ENC__base64(soap, "tplgray", &a->tplgray, "SOAP-ENC:base64"))
				{	soap_flag_tplgray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_image > 0 || soap_flag_image2 > 0 || soap_flag_image3 > 0 || soap_flag_matchTemPlate > 0 || soap_flag_tplgray > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns__TempleFiles *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__TempleFiles, SOAP_TYPE_ns__TempleFiles, sizeof(struct ns__TempleFiles), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns__TempleFiles * SOAP_FMAC2 soap_instantiate_ns__TempleFiles(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__TempleFiles(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns__TempleFiles *p;
	size_t k = sizeof(struct ns__TempleFiles);
	if (n < 0)
	{	p = SOAP_NEW(struct ns__TempleFiles);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns__TempleFiles, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns__TempleFiles location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_ns__TempleFiles, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TempleFiles(struct soap *soap, const struct ns__TempleFiles *a, const char *tag, const char *type)
{
	if (soap_out_ns__TempleFiles(soap, tag ? tag : "ns:TempleFiles", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__TempleFiles * SOAP_FMAC4 soap_get_ns__TempleFiles(struct soap *soap, struct ns__TempleFiles *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__TempleFiles(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENC__base64(struct soap *soap, struct SOAP_ENC__base64 *a)
{
	(void)soap; /* appease -Wall -Werror */
	a->__ptr = NULL;
	a->__size = 0;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENC__base64(struct soap *soap, const struct SOAP_ENC__base64 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__ptr)
		soap_array_reference(soap, a, a->__ptr, a->__size, SOAP_TYPE_SOAP_ENC__base64);
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_SOAP_ENC__base642s(struct soap *soap, struct SOAP_ENC__base64 a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__base64(struct soap *soap, const char *tag, int id, const struct SOAP_ENC__base64 *a, const char *type)
{
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_SOAP_ENC__base64, NULL);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2SOAP_ENC__base64(struct soap *soap, const char *s, struct SOAP_ENC__base64 *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENC__base64 * SOAP_FMAC4 soap_in_SOAP_ENC__base64(struct soap *soap, const char *tag, struct SOAP_ENC__base64 *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENC__base64 *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENC__base64, sizeof(struct SOAP_ENC__base64), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENC__base64(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENC__base64 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENC__base64, SOAP_TYPE_SOAP_ENC__base64, sizeof(struct SOAP_ENC__base64), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENC__base64 * SOAP_FMAC2 soap_instantiate_SOAP_ENC__base64(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENC__base64(%p, %d, %s, %s)\n", soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENC__base64 *p;
	size_t k = sizeof(struct SOAP_ENC__base64);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENC__base64);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENC__base64, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENC__base64 location=%p n=%d\n", p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENC__base64, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENC__base64(struct soap *soap, const struct SOAP_ENC__base64 *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENC__base64(soap, tag ? tag : "SOAP-ENC:base64", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENC__base64 * SOAP_FMAC4 soap_get_SOAP_ENC__base64(struct soap *soap, struct SOAP_ENC__base64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENC__base64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array20Offloat(struct soap *soap, float a[20])
{
	int i;
	(void)soap; /* appease -Wall -Werror */
	for (i = 0; i < 20; i++)
		soap_default_float(soap, a+i);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array20Offloat(struct soap *soap, float const a[20])
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array20Offloat(struct soap *soap, const char *tag, int id, float const a[20], const char *type)
{
	size_t i;
	(void)type;
	soap_array_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Array20Offloat), "xsd:float[20]", 0);
	for (i = 0; i < 20; i++)
	{
		soap_out_float(soap, "item", -1, a+i, "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_Array20Offloat(struct soap *soap, const char *tag, float a[20], const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (float (*))soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array20Offloat, sizeof(float[20]), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_Array20Offloat(soap, a);
	if (soap->body && !*soap->href)
	{	int i;
		for (i = 0; i < 20; i++)
		{	soap_peek_element(soap);
			if (soap->position)
			{	i = soap->positions[0];
				if (i < 0 || i >= 20)
				{	soap->error = SOAP_IOB;
					return NULL;
				}
			}
			if (!soap_in_float(soap, NULL, a+i, "xsd:float"))
			{	if (soap->error != SOAP_NO_TAG)
					return NULL;
				soap->error = SOAP_OK;
				break;
			}
		}
		if (soap->mode & SOAP_C_NOIOB)
			while (soap_element_end_in(soap, tag) == SOAP_SYNTAX_ERROR)
			{	soap->peeked = 1;
				soap_ignore_element(soap);
			}
		else if (soap_element_end_in(soap, tag))
		{	if (soap->error == SOAP_SYNTAX_ERROR)
				soap->error = SOAP_IOB;
			return NULL;
		}
	}
	else
	{	a = (float (*))soap_id_forward(soap, soap->href, (void*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Array20Offloat, sizeof(float[20]), NULL, NULL, NULL, NULL), 0, SOAP_TYPE_Array20Offloat, SOAP_TYPE_Array20Offloat, sizeof(float[20]), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return (float *)a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array20Offloat(struct soap *soap, float const a[20], const char *tag, const char *type)
{
	if (soap_out_Array20Offloat(soap, tag ? tag : "SOAP-ENC:Array", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_Array20Offloat(struct soap *soap, float a[20], const char *tag, const char *type)
{	float (*p);
	if ((p = soap_in_Array20Offloat(soap, tag, a, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
